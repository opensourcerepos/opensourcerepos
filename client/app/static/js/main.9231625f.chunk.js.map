{"version":3,"sources":["components/nav-bar/nav-bar.module.css","components/project-editor/project-editor.module.css","components/project-meta/project-meta.module.css","pages/new-project/new-project.module.css","pages/home-page/home-page.jsx","components/check-authentication/check-authentication.jsx","components/nav-bar/nav-bar.jsx","components/private-route/private-route.jsx","pages/sign-in/sign-in.jsx","components/project-editor/project-editor.jsx","components/project-meta/project-meta.jsx","pages/new-project/new-project.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","navbar","logo","editor","editorform","sidenav","newproject","HomePage","react_default","a","createElement","Component","authenticate","isAuthenticated","cb","this","setTimeout","signout","NavBar","navigateTo","link","e","_this","props","history","push","className","style","onClick","CheckAuthentication","withRouter","PrivateRoute","_ref","component","rest","Object","objectWithoutProperties","react_router","assign","render","to","pathname","state","from","location","Signin","login","ProjectEditor","type","rows","ProjectMeta","NewProject","Fragment","project_editor","project_meta","App","react_router_dom","nav_bar","path","exact","private_route","Boolean","window","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9231625f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"nav-bar_navbar__2JVSb\",\"logo\":\"nav-bar_logo__WfLeZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editor\":\"project-editor_editor__3hRiI\",\"editorform\":\"project-editor_editorform__2xUY1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidenav\":\"project-meta_sidenav__1EJgf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newproject\":\"new-project_newproject__2rRCZ\"};","import React, { Component } from 'react';\n\nclass HomePage extends Component{\n  render(){\n    return(<div>\n      Open Source Repo\n    </div>)\n  }\n}\n\nexport default HomePage;","const authenticate = {\n  isAuthenticated: true,\n  authenticate(cb) {\n    this.isAuthenticated = true;\n    setTimeout(cb, 100); // fake async\n  },\n  signout(cb) {\n    this.isAuthenticated = false;\n    setTimeout(cb, 100);\n  }\n};\n\nexport default authenticate;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport style from './nav-bar.module.css';\nimport { CheckAuthentication } from '../check-authentication';\n\nclass NavBar extends Component{\n\n  navigateTo = (link) => e => {\n    const { history } = this.props;\n    history.push(link)\n  }\n\n  render(){\n    return (\n    <div className={style.navbar}>\n        <span className={style.logo} onClick={this.navigateTo('/')}>\n        Open Source Repos\n        </span>\n        {\n          CheckAuthentication.isAuthenticated ?\n            <button onClick={this.navigateTo('/new-project')}>New Project</button>:\n            <button onClick={this.navigateTo('/signin')}>Signin</button>\n        }\n    </div>\n    )\n  }\n  \n}\n\nexport default withRouter(NavBar);","import React, { Component } from 'react';\nimport {\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { CheckAuthentication } from '../check-authentication';\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        CheckAuthentication.isAuthenticated ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/signin\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { CheckAuthentication } from '../../components/check-authentication';\n\nclass Signin extends Component{\n\n  login = ()=>{\n    CheckAuthentication.authenticate();\n    const { history } = this.props;\n    history.push('/')\n  }\n\n  render(){\n    return(\n      <div>\n        <h3>Signin with</h3>\n        <ul>\n          <li><button onClick={this.login}>Signin with Github</button></li>\n          <li><button>Signin with Google</button></li>\n          <li><button>Signin with Facebook</button></li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(Signin);","import React, { Component } from 'react';\nimport style from './project-editor.module.css';\n\nclass ProjectEditor extends Component{\n  render(){\n    return(\n      <div className={style.editor}>\n        <form className={style.editorform}>\n          <input type=\"text\"/>\n          <textarea rows=\"10\"></textarea>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default ProjectEditor;","import React, { Component } from 'react';\nimport style from './project-meta.module.css';\n\nclass ProjectMeta extends Component{\n  render(){\n    return(\n      <div className={style.sidenav}>\n        <select>\n          <option>Webpack</option>\n          <option>Angular</option>\n          <option>Angular JS</option>\n          <option>React</option>\n          <option>React DnD</option>\n        </select>\n      </div>\n    )\n  }\n}\n\nexport default ProjectMeta;","import React, { Component } from 'react';\nimport { ProjectEditor } from '../../components/project-editor';\nimport ProjectMeta from '../../components/project-meta/project-meta';\nimport style from './new-project.module.css';\n\nclass NewProject extends Component{\n  render(){\n    return(\n      <React.Fragment>\n        <div className={style.newproject}>\n          <ProjectEditor/>\n          <ProjectMeta/>\n        </div>\n        <button>Publish</button>\n        <button>Save as Draft</button>\n        <button>Preview</button>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default NewProject","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport { HomePage } from './pages/home-page';\nimport { NavBar } from './components/nav-bar';\nimport { PrivateRoute } from './components/private-route';\nimport { Signin } from './pages/sign-in';\nimport { NewProject } from './pages/new-project';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        \n        <Router>\n          <NavBar/>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/signin\" exact component={Signin} />\n          <PrivateRoute path=\"/new-project\" exact component={NewProject}/>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}